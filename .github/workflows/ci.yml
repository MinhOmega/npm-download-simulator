name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  merge_group:
    types:
      - checks_requested

permissions:
  contents: read
  pull-requests: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

    - name: Cache yarn dependencies
      uses: actions/cache@v3
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run tests with coverage
      run: yarn test

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Get coverage percentage
      id: coverage
      run: |
        COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

    - name: Comment PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const coverageData = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
          
          let coverageTable = '| File | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s |\n';
          coverageTable += '|------|---------|----------|---------|---------|-------------------|\n';
          
          for (const [file, data] of Object.entries(coverageData)) {
            if (file !== 'total') {
              const stmts = data.statements.pct.toFixed(2);
              const branch = data.branches.pct.toFixed(2);
              const funcs = data.functions.pct.toFixed(2);
              const lines = data.lines.pct.toFixed(2);
              const uncovered = Array.isArray(data.lines.skipped) ? data.lines.skipped.join(',') : '-';
              coverageTable += `| ${file} | ${stmts}% | ${branch}% | ${funcs}% | ${lines}% | ${uncovered} |\n`;
            }
          }
          
          const totalCoverage = coverageData.total;
          coverageTable += `| All files | ${totalCoverage.statements.pct.toFixed(2)}% | ${totalCoverage.branches.pct.toFixed(2)}% | ${totalCoverage.functions.pct.toFixed(2)}% | ${totalCoverage.lines.pct.toFixed(2)}% | - |\n`;
          
          const comment = `## Test Coverage Report\n\n\`\`\`\n${coverageTable}\n\`\`\`\n\nLast updated: ${new Date().toUTCString()}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
